http://zorc.breitbandkatze.de/crc.html


// ----------------------------------------------------------------------------
// CRC tester v1.3 written on 4th of February 2003 by Sven Reifegerste (zorc/reflex)
// This is the complete compilable C program, consisting only of this .c file.
// No guarantee for any mistakes.
//
// changes to CRC tester v1.2:
//
// - remove unneccessary (!(polynom&1)) test for invalid polynoms
//   (now also XMODEM parameters 0x8408 work in c-code as they should)
//
// changes to CRC tester v1.1:
//
// - include an crc&0crcmask after converting non-direct to direct initial
//   value to avoid overflow
//
// changes to CRC tester v1.0:
//
// - most int's were replaced by unsigned long's to allow longer input strings
//   and avoid overflows and unnecessary type-casting's
// ----------------------------------------------------------------------------

// includes:

#include <string.h>
#include <stdio.h>


// CRC parameters (default values are for CRC-32):

const int order = 32;
const unsigned long polynom = 0x4c11db7;
const int direct = 1;
const unsigned long crcinit = 0xffffffff;
const unsigned long crcxor = 0xffffffff;
const int refin = 1;
const int refout = 1;

// 'order' [1..32] is the CRC polynom order, counted without the leading '1' bit
// 'polynom' is the CRC polynom without leading '1' bit
// 'direct' [0,1] specifies the kind of algorithm: 1=direct, no augmented zero bits
// 'crcinit' is the initial CRC value belonging to that algorithm
// 'crcxor' is the final XOR value
// 'refin' [0,1] specifies if a data byte is reflected before processing (UART) or not
// 'refout' [0,1] specifies if the CRC will be reflected before XOR


// Data character string

const unsigned char string[] = {"123456789"};

// internal global values:

unsigned long crcmask;
unsigned long crchighbit;
unsigned long crcinit_direct;
unsigned long crcinit_nondirect;
unsigned long crctab[256];


// subroutines

unsigned long reflect (unsigned long crc, int bitnum) {

	// reflects the lower 'bitnum' bits of 'crc'

	unsigned long i, j=1, crcout=0;

	for (i=(unsigned long)1<<(bitnum-1); i; i>>=1) {
		if (crc & i) crcout|=j;
		j<<= 1;
	}
	return (crcout);
}



void generate_crc_table() {

	// make CRC lookup table used by table algorithms

	int i, j;
	unsigned long bit, crc;

	for (i=0; i<256; i++)
	    {

		crc=(unsigned long)i;

		if (refin) crc=reflect(crc, 8);

		crc <<= order - 8;

		for (j=0; j<8; j++)
		   {
			bit = crc & crchighbit;

			crc <<= 1;

			if (bit)
                {
                crc ^= polynom;
                }
		    }

		if (refin) crc = reflect(crc, order);

		crc &= crcmask;
		crctab[i]= crc;
	}
}


// 2008-02-06 This is the one I used!

unsigned long crctablefast (unsigned char* p, unsigned long len) {

	// fast lookup table algorithm without augmented zero bytes, e.g. used in pkzip.
	// only usable with polynom orders of 8, 16, 24 or 32.

	unsigned long crc = crcinit_direct;

	if (refin) crc = reflect(crc, order);

	if (!refin)
        {
        while (len--) crc = (crc << 8) ^ crctab[ ((crc >> (order-8)) & 0xff) ^ *p++];
        }
	else
        {
        while (len--) crc = (crc >> 8) ^ crctab[ (crc & 0xff) ^ *p++];
        }

	if (refout^refin) crc = reflect(crc, order);
	
	crc ^= crcxor;
	crc &= crcmask;

	return(crc);
}



unsigned long crctable (unsigned char* p, unsigned long len) {

	// normal lookup table algorithm with augmented zero bytes.
	// only usable with polynom orders of 8, 16, 24 or 32.

	unsigned long crc = crcinit_nondirect;

	if (refin) crc = reflect(crc, order);

	if (!refin) while (len--) crc = ((crc << 8) | *p++) ^ crctab[ (crc >> (order-8))  & 0xff];
	else while (len--) crc = ((crc >> 8) | (*p++ << (order-8))) ^ crctab[ crc & 0xff];

	if (!refin) while (++len < order/8) crc = (crc << 8) ^ crctab[ (crc >> (order-8))  & 0xff];
	else while (++len < order/8) crc = (crc >> 8) ^ crctab[crc & 0xff];

	if (refout^refin) crc = reflect(crc, order);
	crc^= crcxor;
	crc&= crcmask;

	return(crc);
}



unsigned long crcbitbybit(unsigned char* p, unsigned long len) {

	// bit by bit algorithm with augmented zero bytes.
	// does not use lookup table, suited for polynom orders between 1...32.

	unsigned long i, j, c, bit;
	unsigned long crc = crcinit_nondirect;

	for (i=0; i<len; i++) {

		c = (unsigned long)*p++;
		if (refin) c = reflect(c, 8);

		for (j=0x80; j; j>>=1) {

			bit = crc & crchighbit;
			crc<<= 1;
			if (c & j) crc|= 1;
			if (bit) crc^= polynom;
		}
	}

	for (i=0; i<order; i++) {

		bit = crc & crchighbit;
		crc<<= 1;
		if (bit) crc^= polynom;
	}

	if (refout) crc=reflect(crc, order);
	crc^= crcxor;
	crc&= crcmask;

	return(crc);
}



unsigned long crcbitbybitfast(unsigned char* p, unsigned long len) {

	// fast bit by bit algorithm without augmented zero bytes.
	// does not use lookup table, suited for polynom orders between 1...32.

	unsigned long i, j, c, bit;
	unsigned long crc = crcinit_direct;

	for (i=0; i<len; i++) {

		c = (unsigned long)*p++;
		if (refin) c = reflect(c, 8);

		for (j=0x80; j; j>>=1) {

			bit = crc & crchighbit;
			crc<<= 1;
			if (c & j) bit^= crchighbit;
			if (bit) crc^= polynom;
		}
	}

	if (refout) crc=reflect(crc, order);
	crc^= crcxor;
	crc&= crcmask;

	return(crc);
}



int main() {

	// test program for checking four different CRC computing types that are:
	// crcbit(), crcbitfast(), crctable() and crctablefast(), see above.
	// parameters are at the top of this program.
	// Result will be printed on the console.

	int i;
	unsigned long bit, crc;


	// at first, compute constant bit masks for whole CRC and CRC high bit

	crcmask = ((((unsigned long)1<<(order-1))-1)<<1)|1;
	crchighbit = (unsigned long)1<<(order-1);


	// check parameters

	if (order < 1 || order > 32) {
		printf("ERROR, invalid order, it must be between 1..32.\n");
		return(0);
	}

	if (polynom != (polynom & crcmask)) {
		printf("ERROR, invalid polynom.\n");
		return(0);
	}

	if (crcinit != (crcinit & crcmask)) {
		printf("ERROR, invalid crcinit.\n");
		return(0);
	}

	if (crcxor != (crcxor & crcmask)) {
		printf("ERROR, invalid crcxor.\n");
		return(0);
	}


	// generate lookup table

	generate_crc_table();


	// compute missing initial CRC value

	if (!direct) {

		crcinit_nondirect = crcinit;
		crc = crcinit;
		for (i=0; i<order; i++) {

			bit = crc & crchighbit;
			crc<<= 1;
			if (bit) crc^= polynom;
		}
		crc&= crcmask;
		crcinit_direct = crc;
	}

	else {

		crcinit_direct = crcinit;
		crc = crcinit;
		for (i=0; i<order; i++) {

			bit = crc & 1;
			if (bit) crc^= polynom;
			crc >>= 1;
			if (bit) crc|= crchighbit;
		}
		crcinit_nondirect = crc;
	}


	// call CRC algorithms using the CRC parameters above and print result to the console

	printf("\n");
	printf("CRC tester v1.1 written on 13/01/2003 by Sven Reifegerste (zorc/reflex)\n");
	printf("-----------------------------------------------------------------------\n");
	printf("\n");
	printf("Parameters:\n");
	printf("\n");
	printf(" polynom             :  0x%x\n", polynom);
	printf(" order               :  %d\n", order);
	printf(" crcinit             :  0x%x direct, 0x%x nondirect\n", crcinit_direct, crcinit_nondirect);
	printf(" crcxor              :  0x%x\n", crcxor);
	printf(" refin               :  %d\n", refin);
	printf(" refout              :  %d\n", refout);
	printf("\n");
	printf(" data string         :  '%s' (%d bytes)\n", string, strlen(string));
	printf("\n");
	printf("Results:\n");
	printf("\n");

	printf(" crc bit by bit      :  0x%x\n", crcbitbybit((unsigned char *)string, strlen(string)));
	printf(" crc bit by bit fast :  0x%x\n", crcbitbybitfast((unsigned char *)string, strlen(string)));
	if (!(order&7)) printf(" crc table           :  0x%x\n", crctable((unsigned char *)string, strlen(string)));
	if (!(order&7)) printf(" crc table fast      :  0x%x\n", crctablefast((unsigned char *)string, strlen(string)));

	return(0);
}


JAVASCRIPT

function resetform()
{
  clrpar();
  setparcrc32();
  document.crcform.data.value="123456789";
}

function clrpar()
{
  document.crcform.order.value="";
  document.crcform.polynom.value="";
  document.crcform.init.value="";
  document.crcform.xor.value="";
  document.crcform.result.value="";
  document.crcform.reflect[0].checked = false;
  document.crcform.reflect[1].checked = false;
  document.crcform.crcinittype[0].checked=true;
  document.crcform.crcinittype[1].checked=false;
  setfocus(document.crcform.order);
}

function setparcrcccitt()
{
  document.crcform.order.value="16";
  document.crcform.polynom.value="1021";
  document.crcform.init.value="FFFF";
  document.crcform.xor.value="0";
  document.crcform.reflect[0].checked = false;
  document.crcform.reflect[1].checked = false;
  document.crcform.crcinittype[0].checked=false;
  document.crcform.crcinittype[1].checked=true;
  setfocus(document.crcform.data);
}

function setparcrc16()
{
  document.crcform.order.value="16";
  document.crcform.polynom.value="8005";
  document.crcform.init.value="0";
  document.crcform.xor.value="0";
  document.crcform.reflect[0].checked = true;
  document.crcform.reflect[1].checked = true;
  document.crcform.crcinittype[0].checked=false;
  document.crcform.crcinittype[1].checked=true;
  setfocus(document.crcform.data);
}

function setparcrc32()
{
  document.crcform.order.value="32";
  document.crcform.polynom.value="4C11DB7";
  document.crcform.init.value="FFFFFFFF";
  document.crcform.xor.value="FFFFFFFF";
  document.crcform.reflect[0].checked = true;
  document.crcform.reflect[1].checked = true;
  document.crcform.crcinittype[0].checked=false;
  document.crcform.crcinittype[1].checked=true;
  setfocus(document.crcform.data);
}

function clrdata()
{
  document.crcform.data.value="";
  setfocus(document.crcform.data);
}


function setfocus(crsr)
{
  crsr.focus();
  crsr.select();
}


function compute()
{
  // computes crc value

  var i;
  var j;
  var k;
  var bit;
  var datalen;
  var len;
  var actchar;
  var flag;
  var counter;
  var c;
  var crc = new Array (8+1);
  var mask = new Array (8);
  var hexnum = new Array ("0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F");

  var data;
  var order;
  var polynom = new Array (8);
  var init = new Array (8);
  var xor = new Array (8);


  // check if all entries are present

  if (document.crcform.order.value == "" || document.crcform.polynom.value == "" ||
      document.crcform.init.value == "" || document.crcform.xor.value == "")
  {
    document.crcform.result.value= "Invalid parameters";
    return;
  }


  // convert crc order

  order=parseInt(document.crcform.order.value, 10);
  if (isNaN(order) == true || order<1 || order>64)
  {
    document.crcform.result.value = "CRC order must be between 1 and 64";
    return;
  }


  // convert crc polynom

  polynom = convertentry (document.crcform.polynom.value, order);
  if (polynom[0]<0)
  {
    document.crcform.result.value = "Invalid CRC polynom";
    return;
  }


  // check if polynom is valid (bit 0 must be set)

//  if (!(polynom[7]&1))
//  {
//    document.crcform.result.value = "CRC polynom LSB must be set";
//    return;
//  }


  // convert crc init value

  init = convertentry (document.crcform.init.value, order);
  if (init[0]<0)
  {
    document.crcform.result.value = "Invalid initial value";
    return;
  }


  // convert crc xor value

  xor = convertentry (document.crcform.xor.value, order);
  if (xor[0]<0)
  {
    document.crcform.result.value = "Invalid XOR value";
    return;
  }


  // generate bit mask

  counter = order;
  for (i=7; i>=0; i--)
  {
    if (counter>=8) mask[i] = 255;
    else mask[i]=(1<<counter)-1;
    counter-=8;
    if (counter<0) counter=0;
  }

  crc = init;

  if (document.crcform.crcinittype[0].checked)		// nondirect -> direct
  {
    crc[8] = 0;

    for (i=0; i<order; i++)
    {
      bit = crc[7-((order-1)>>3)] & (1<<((order-1)&7));
      for (k=0; k<8; k++) {
        crc[k] = ((crc [k] << 1) | (crc [k+1] >> 7)) & mask [k];
        if (bit) crc[k]^= polynom[k];
      }
    }
  }


//  data = unescape(document.crcform.data.value);
  data = document.crcform.data.value;
  datalen = data.length;
  len=0;                     // number of data bytes

  crc[8]=0;


  // main loop, algorithm is fast bit by bit type

  for (i=0; i<datalen; i++)
  {
    c = data.charCodeAt(i);
    if (data.charAt(i)=='%')				// unescape byte by byte (%00 allowed)
    {
      if (i>datalen-3)
        {
        document.crcform.result.value = "Invalid data sequence";
        return;
        }
      ch = parseInt(data.charAt(++i), 16);
      if (isNaN(ch) == true)
        {
        document.crcform.result.value = "Invalid data sequence";
        return;
        }
      c = parseInt(data.charAt(++i), 16);
      if (isNaN(c) == true)
        {
        document.crcform.result.value = "Invalid data sequence";
        return;
        }
      c = (c&15) | ((ch&15)<<4);
    }


    // perform revin

    if (document.crcform.reflect[0].checked)
      c = reflectByte(c);

    // rotate one data byte including crcmask

    for (j=0; j<8; j++)
    {
      bit=0;
      if (crc[7-((order-1)>>3)] & (1<<((order-1)&7))) bit=1;
      if (c&0x80) bit^=1;
      c<<=1;
      for (k=0; k<8; k++)		// rotate all (max.8) crc bytes
      {
        crc[k] = ((crc [k] << 1) | (crc [k+1] >> 7)) & mask [k];
        if (bit) crc[k]^= polynom[k];
      }
    }
  len++;
  }


  // perform revout

  if (document.crcform.reflect[1].checked)
    crc = reflect(crc, order, 0);


  // perform xor value

  for (i=0; i<8; i++) crc [i] ^= xor [i];


  // write result

  document.crcform.result.value = "";

  flag=0;
  for (i=0; i<8; i++)
  {
    actchar = crc[i]>>4;
    if (flag || actchar)
    {
      document.crcform.result.value+= hexnum[actchar];
      flag=1;
    }

    actchar = crc[i] & 15;
    if (flag || actchar || i==7)
    {
      document.crcform.result.value+= hexnum[actchar];
      flag=1;
    }
  }

  document.crcform.result.value+= " (hex), " + len +" data byte";
  if (len!=1) document.crcform.result.value+= "s";
  setfocus(document.crcform.data);
}




function revpoly ()
{
  // reverses poly

  var polynom = new Array (8);
  var order;
  var actchar;
  var flag;
  var hexnum = new Array ("0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F");


  document.crcform.result.value = "";

  // convert crc order

  order=parseInt(document.crcform.order.value, 10);
  if (isNaN(order) == true || order<1 || order>64)
  {
    document.crcform.result.value = "CRC order must be between 1 and 64";
    return;
  }

  // convert crc polynom

  polynom = convertentry (document.crcform.polynom.value, order);
  if (polynom[0]<0)
  {
    document.crcform.result.value = "Invalid CRC polynom";
    return;
  }

  // check if polynom is valid (bit 0 must be set)

//  if (!(polynom[7]&1))
//  {
//    document.crcform.result.value = "CRC polynom LSB must be set";
//    return;
//  }


  // compute reversed polynom (reflected starting at second LSB that is bit 1)

  polynom = reflect(polynom, order, 1)


  // write result

  document.crcform.result.value = "polynom reversed";
  document.crcform.polynom.value = "";

  flag=0;
  for (i=0; i<8; i++)
  {
    actchar = polynom[i]>>4;
    if (flag || actchar)
    {
      document.crcform.polynom.value+= hexnum[actchar];
      flag=1;
    }

    actchar = polynom[i] & 15;
    if (flag || actchar || i==7)
    {
      document.crcform.polynom.value+= hexnum[actchar];
      flag=1;
    }
  }
}


function chgtype ()
{
  // change crc init type (algorithm dependend)

  var init = new Array (8+1);
  var order;
  var actchar;
  var flag;
  var mask = new Array (8);
  var polynom = new Array (8);
  var hexnum = new Array ("0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F");


  document.crcform.result.value = "";

  // convert crc order

  order=parseInt(document.crcform.order.value, 10);
  if (isNaN(order) == true || order<1 || order>64)
  {
    document.crcform.result.value = "CRC order must be between 1 and 64";
    return;
  }


  // convert crc polynom

  polynom = convertentry (document.crcform.polynom.value, order);
  if (polynom[0]<0)
  {
    document.crcform.result.value = "Invalid CRC polynom";
    return;
  }

  // check if polynom is valid (bit 0 must be set)

//  if (!(polynom[7]&1))
//  {
//    document.crcform.result.value = "CRC polynom LSB must be set";
//    return;
//  }



  // convert crc init value

  init = convertentry (document.crcform.init.value, order);
  if (init[0]<0)
  {
    document.crcform.result.value = "Invalid initial value";
    return;
  }


  // algorithm starts here (bit by bit type)
  // generate and byte mask

  counter = order;
  for (i=7; i>=0; i--)
  {
    if (counter>=8) mask[i] = 255;
    else mask[i]=(1<<counter)-1;
    counter-=8;
    if (counter<0) counter=0;
  }


  // compute new init value

  if (document.crcform.crcinittype[0].checked)		// nondirect -> direct
  {
    init[8] = 0;

    for (i=0; i<order; i++) {

      bit = init[7-((order-1)>>3)] & (1<<((order-1)&7));
      for (k=0; k<8; k++) {
        init[k] = ((init [k] << 1) | (init [k+1] >> 7)) & mask [k];
        if (bit) init[k]^= polynom[k];
      }
    }
    document.crcform.crcinittype[0].checked=false;
    document.crcform.crcinittype[1].checked=true;
    document.crcform.result.value = "converted to direct initial value";
  }

  else
  {
    for (i=0; i<order; i++) {				// direct -> nondirect

      bit=init[7]&1;
      for (k=0; k<8; k++) if (bit) init[k]^= polynom[k];
      for (k=7; k; k--) init[k] = ((init [k] >> 1) | ((init[k-1]&1) << 7)) & mask [k];
      init[0]>>=1;
      if (bit) init[7-((order-1)>>3)] |= 1<<((order-1)&7);

    }
    document.crcform.crcinittype[0].checked=true;
    document.crcform.crcinittype[1].checked=false;
    document.crcform.result.value = "converted to nondirect initial value";
  }



  // write result

  document.crcform.init.value = "";

  flag=0;
  for (i=0; i<8; i++)
  {
    actchar = init[i]>>4;
    if (flag || actchar)
    {
      document.crcform.init.value+= hexnum[actchar];
      flag=1;
    }

    actchar = init[i] & 15;
    if (flag || actchar || i==7)
    {
      document.crcform.init.value+= hexnum[actchar];
      flag=1;
    }
  }
}


function reflectByte(inbyte)
{
  // reflect one byte

  var outbyte=0;
  var i=0x01;
  var j;

  for (j=0x80; j; j>>=1)
  {
    if (inbyte & i) outbyte|=j;
    i<<=1;
  }
  return (outbyte);
}


function reflect(crc, bitnum, startLSB)
{
  // reflect 'bitnum' bits starting at lowest bit = startLSB

  var i, j, k, iw, jw, bit;

  for (k=0; k+startLSB<bitnum-1-k; k++) {

    iw=7-((k+startLSB)>>3);
    jw=1<<((k+startLSB)&7);
    i=7-((bitnum-1-k)>>3);
    j=1<<((bitnum-1-k)&7);

    bit = crc[iw] & jw;
    if (crc[i] & j) crc[iw] |= jw;
    else crc[iw] &= (0xff-jw);
    if (bit) crc[i] |= j;
    else crc[i] &= (0xff-j);
  }

/* old bad code
  iw = 7;                        // LSByte
  jw = 1<<startLSB;              // LSBit, 0=bit0 (crc), 1=bit1 (poly)

  for (i=7-((bitnum-1)>>3); i<8; i++)
  {
    for (j=1<<((bitnum-1)&7); j && (!(i>iw || (i==iw && j<jw))); j>>=1)
    {
      bit = crc[iw] & jw;
      if (crc[i] & j) crc[iw] |= jw;
      else crc[iw] &= (0xff-jw);
      if (bit) crc[i] |= j;
      else crc[i] &= (0xff-j);

      jw = (jw<<1) & 0xff;
      if (!jw) {
        iw--;
        jw=1;
      }
    }
  }
*/
  return(crc);
}


function convertentry (input, order)
{
  // convert from ascii to hexadecimal value (stored as byte sequence)

  var len;
  var actchar;
  var polynom = new Array (0,0,0,0,0,0,0,0);
  var brk = new Array (-1,0,0,0,0,0,0,0);

  // convert crc value into byte sequence

  len = input.length;
  for (i=0; i < len; i++)
  {
    actchar = parseInt(input.charAt(i), 16);
    if (isNaN(actchar) == true) return (brk);
    actchar&=15;

    for (j=0; j<7; j++) polynom[j] = ((polynom [j] << 4) | (polynom [j+1] >> 4)) & 255;
    polynom[7] = ((polynom[7] <<4) | actchar) & 255;
  }


  // compute and check crc order

  count = 64;
  for (i=0; i<8; i++)
  {
    for (j=0x80; j; j>>=1)
    {
      if (polynom[i] & j) break;
      count--;
    }
    if (polynom[i] & j) break;
  }

  if (count > order) return (brk);

  return(polynom);
}