# Copyright 2000, 2001, 2002, 2003, 04, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2013
# Laurence Newell
# starbase@ukraa.com
# radio.telescope@btinternet.com
#
# This file is part of Starbase.
#
# Starbase is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Starbase is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Starbase.  If not, see http://www.gnu.org/licenses.

# The file lists the commands available in the class AbstractObservatoryInstrumentDAO

# Core
reset=This command resets the instrument to a known state. It can have up to three options: Soft, Defaults, Staribus. reset(Soft) simply clears any logs. reset(Defaults) clears all data, metadata, and logs. For appropriate hardware, reset(Staribus) clears logs then closes and re-opens the Staribus port, to flush any remaining messages.
ping=This command sends a simple message to the controller and expects a response. It can be used to test communications with the controller. If ping() does not work, then it is very unlikely any other command will succeed. Note that in the case of instruments entirely on the host computer ('virtual' instruments) then ping() does not test any communications link.

# Configuration
getConfiguration=Downloads and assembles the configuration from each instrument plugin, to form the composite Instrument XML, viewable on the tab. For local instruments, this simply reads the files on the host computer. For instruments connected via a port, messages are sent to each plugin to collect the data. This assembly operation may take some time depending on the number of plugins connected, and the speed of the communications link.
getModuleConfiguration=Downloads the configuration XML from the specified Module (Plugin). This command is used internally by getConfiguration() when assembling the configuration of the complete instrument.
setModuleConfiguration=Uploads the specified configuration XML to the specified Module (Plugin). This command may be used to individually configure plugins to suit specific tasks. It should be followed by getConfiguration() in order that the instrument recognises the new setup.
getConfigurationBlockCount=Reads the number of blocks of configuration XML in the memory of the specified Module (Plugin). Note that this command can take several seconds to run on some hardware, since it has to scan the entire memory on the plugin, which may be slow EEPROM.
getConfigurationBlock=Downloads the specified block of configuration XML from the specified Module (Plugin). This command is used internally by getModuleConfiguration() and getConfiguration() when assembling the composite configuration information.
setConfigurationBlock=Uploads the specified block of configuration XML to the specified Module (Plugin). This command may be used to individually configure plugins to suit specific tasks. It should be followed by getConfiguration() in order that the instrument recognises the new setup.

# Miscellaneous
start=This command starts the instrument. It is equivalent to pressing the green button on the control panel. It is included for later use in macros, and has no useful purpose in non-macro operation.
stop=This command stops the instrument. It is equivalent to pressing the red button on the control panel. It is included for later use in macros, and has no useful purpose in non-macro operation.
wait=This command waits for the specified amount of time. It is included for later use in macros.
copyResponseToClipboard=This command copies the last response value (see the Command Log tab) to the operating system clipboard, so that it may be pasted into a parameter of another command, or into another application. Note that some Commands return a response value of a simple 'Ok', with the real data appearing on the RawData tab. You cannot copy the entire dataset to the clipboard, it must first be exported to a file.
getVersion=This command returns the version of software currently installed in the Controller or Plugin. In the case of instruments entirely on the host computer ('virtual' instruments) then getVersion() returns the version information obtained from the Instrument JAR file used for distribution. Please quote this information if reporting a fault.

# DataProcessor
applyLinearTransform=This command applies a linear transform to the RawData, producing new Processed data. The RawData remain unaffected. The transform can change the 'gain factor' or the 'DC level' of the signal.
segmentTimeSeries=**Under Development** This command takes the RawData or Processed data, and segments the data into multiple files of lengths in Day, Hour or Minute. The Daytime option also removes the hours of darkness, as indicated for the location of the Observatory taken from the metadata.
applyIntegrator=**Under Development** This command applies an integrator (low pass filter)  to the RawData, producing new Processed data. The RawData remain unaffected. If the location information is not correct, then this command may produce unexpected results.
appendDataset=**Under Development** This command appends a dataset to the RawData, i.e. adding more channels of data.
evalTemperatureCorrelation=This command calculates the Pearson correlation coefficient between each channel of RawData and the Temperature channel. The higher the value of the coefficient, the more likely that the data are affected by temperature changes in the instrument. See: http://en.wikipedia.org/wiki/Correlation_and_dependence. Remember that "correlation does not imply causation"!

# MetadataManager
importMetadata=This command imports metadata from one of the following categories: Framework, Observatory, Observer, Instrument, Controller, or one of the Plugins. The metadata should be in an appropriately named file in an imports folder, e.g. {instrument-name}-Observation-metadata.xml will contain the Observation metadata for that instrument. The metadata applicable to the entire Observatory are in Observatory-metadata.xml.
importMetadataLocal=This command imports Custom metadata from a file in the local filesystem. The metadata must use the CustomMetadata tag, in an appropriately named XML file, e.g. MyCustom-metadata.xml. The metadata may be in any of the following categories: Framework, Observatory, Observer, Instrument, Controller, or one of the Plugins. There is an example file in /workspace/tests/etc. You may have as many different custom metadata files as you wish, ready for use in various circumstances.
setMetadataValue=This command sets the value of a specific metadata item associated with the instrument. Note that this changed information will be saved only with the current data, using the Exporter. Please read the warnings in the Metadata Editor about the restrictions on changing the DataType or Units of the Metadata.
addToposWMMMetadata=This command adds the World Magnetic Model (WMM) metadata applicable to the location of the Observatory (topocentric) to the Observation metadata, which can then be viewed on the Metadata tab. This is intended for users of magnetometers, where a record of the WMM data would be useful if saved with observational data. The WMM algorithm currently used is valid until 2014-12-31. See for instance http://www.ngdc.noaa.gov/geomag/WMM/DoDWMM.shtml.
addVLSRMetadata=**Under Development** Calculate the Velocity of the Local Standard of Rest (VLSR) for a specified observation direction, to enable accurate correction of Doppler effects in measured frequencies. Add the relevant parameters and the result to the Observation Metadata. See for instance: http://jupiterspacestation.org/software/Vlsr.html.
exportMetadata=Exports the contents of the Metadata tab in a variety of file formats.
removeMetadata=This command removes metadata from one of the following categories: Framework, Observatory, Observer, Observation, Instrument. Specific groups or items of metadata should then be reloaded prior to saving any observational data. WARNING! Removing Framework or Observatory Metadata will mean that you will lose Locale and Location information until the Metadata are re-imported. The Framework and Observatory will revert to the location (Longitude +000:00:00, Latitude +00:00:00).
importPointsOfInterest=This command imports Points of Interest (POI) from Framework, Observatory, Instrument categories. The POI may be viewed on one of the map tabs. The POI should be in an appropriately named file in an imports folder, e.g. {instrument-name}-poi.xml will contain the POI specific to the Instrument, or Observatory POIs will be taken from Observatory-poi.xml..
removePointsOfInterest=This command removes Points of Interest (POI) from the map view, in the categories of Framework, Observatory, Instrument.

# Importers
importRawDataLocal=Import a data file from the local file system.
importRawDataRemote=Import a data file from a remote server using FTP. The FTP login credentials are held in the properties file associated with the instrument. This information may be viewed on the Configuration tab.
importRawDataRemoteIncrement=Import incrementally a data file from a remote server using FTP, i.e. downloading only the changes since the last transfer, using the FTP REST command. The FTP login credentials are held in the properties file associated with the instrument. This information may be viewed on the Configuration tab.
importRawDataRemoteServer=Import a single data file from a remote server using FTP. The FTP server login credentials are supplied as command parameters. You may apply a Filter to the imported RawData, to generated ProcessedData during the import operation.


# Exporters
exportCommandLog=Exports the contents of the Command Log in a variety of file formats. Note that even if the current view is truncated that the export will still contain the entire log.
exportChart=Exports the contents of the Chart tab as an image in a variety of file formats.
exportProcessedData=Exports the contents of the Processed Data tab in a variety of file formats. Note that even if the current view is truncated that the export will still contain the entire log.
exportRawData=Exports the contents of the Raw Data tab in a variety of file formats. Note that even if the current view is truncated that the export will still contain the entire log.
exportEphemeris=Exports the contents of the Ephemeris tab in a variety of file formats.
exportStarMap=Exports the contents of the Star Map tab as an image in a variety of file formats.
exportRegionalMap=Exports the contents of the Regional Map tab as an image in a variety of file formats.
exportSatelliteMap=Exports the contents of the Satellite Map tab as an image in a variety of file formats.
exportInstrumentLog=Exports the contents of the Instrument Log tab in a variety of file formats. Note that even if the current view is truncated that the export will still contain the entire log.
exportEventLog=Exports the contents of the Event Log tab in a variety of file formats. Note that even if the current view is truncated that the export will still contain the entire log.
exportMetadata=Exports the contents of the Metadata tab in a variety of file formats.
exportConfiguration=Exports the contents of the Configuration tab in a variety of file formats.
exportCommandLexicon=Exports the contents of the Command Lexicon tab in a variety of file formats.
exportInstrumentXML=Exports the contents of the Instrument XML tab as an XML file.

