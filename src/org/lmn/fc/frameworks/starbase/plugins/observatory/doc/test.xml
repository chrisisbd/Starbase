<!-- The Staribus Controller -->
<Controller> <!-- A placeholder for the discovered address on Staribus, or an address already assigned --> <!-- Three DECIMAL digits, range {001...254} --> <!-- Default address is 001 -->
    <StaribusAddress>001</StaribusAddress>
    <Identifier>Core</Identifier>
    <Name>Core</Name>
    <Description>The Staribus Controller Core</Description>
    <ResourceKey>Core</ResourceKey>
    <!-- An example of Configuration Metadata specific to this Core --> <!--<Configuration> --> <!--<md:Key>Example.Data</md:Key> --> <!--<md:Value>Example</md:Value> --> <!--<md:DataTypeName>String</md:DataTypeName> --> <!--<md:Units>Dimensionless</md:Units> --> <!--<md:Description>A sample item of Core metadata</md:Description> --> <!--</Configuration> -->   <!-- Staribus Generic (Mandatory) Commands --> <!-- The Core has a CommandCodeBase of zero --> <!-- All Core CommandVariants are zero -->
    <CommandCodeBase>00</CommandCodeBase>
    <!-- reset() returns the Controller to its initialised state -->
    <Command>
        <Identifier>reset</Identifier>
        <CommandCode>00</CommandCode>
        <CommandVariant>0000</CommandVariant>
        <Description>Resets the Controller</Description>
        <Parameter>
            <Name>Mode</Name>
            <InputDataType>
                <DataTypeName>String</DataTypeName>
            </InputDataType>
            <TrafficDataType>
                <DataTypeName>NumericIndexedList</DataTypeName>
                <FieldCount>1</FieldCount>
            </TrafficDataType>
            <Units>Dimensionless</Units>
            <Choices>Defaults,Soft</Choices>
            <Tooltip>Allowed values: Defaults, Soft</Tooltip>
        </Parameter>
        <SendToPort>true</SendToPort>
        <Ack>
            <Name>Ack</Name>
        </Ack>
    </Command>
    <!-- ping() indicates if a Controller is connected at this address -->
    <Command>
        <Identifier>ping</Identifier>
        <CommandCode>01</CommandCode>
        <CommandVariant>0000</CommandVariant>
        <Description>Pings the Controller</Description>
        <SendToPort>true</SendToPort>
        <Ack>
            <Name>Ack</Name>
        </Ack>
    </Command>
    <!-- getConfiguration() reads the memories of all connected Modules, --> <!-- and forms the XML configuration of the composite Instrument --> <!-- This Command is executed entirely on the host -->
    <Command>
        <Identifier>getConfiguration</Identifier>
        <CommandCode>02</CommandCode>
        <CommandVariant>0000</CommandVariant>
        <!-- Obtain the assembled XML data by iterating this 'macro' --> <!-- Core.getModuleConfiguration() -->
        <SteppedDataCommand>
            <SteppedCommandCodeBase>00</SteppedCommandCodeBase>
            <SteppedCommandCode>03</SteppedCommandCode>
        </SteppedDataCommand>
        <Description>Gets the assembled XML configuration of the Instrument</Description>
        <SendToPort>false</SendToPort>
        <Response>
            <Name>Configuration.XML</Name>
            <DataTypeName>XML</DataTypeName>
            <Units>Dimensionless</Units>
        </Response>
    </Command>
    <!-- getModuleConfiguration() first uses getConfigurationBlockCount() to get the number of blocks --> <!-- then iterates over getConfigurationBlock() to get all blocks from the specified ModuleID --> <!-- These sub-commands are specified through the use of the <BlockedDataCommand> element --> <!-- If a Module is missing, then the ResponseValue must be 'NODATA' -->
    <Command>
        <Identifier>getModuleConfiguration</Identifier>
        <CommandCode>03</CommandCode>
        <CommandVariant>0000</CommandVariant>
        <!-- The SteppedCommand ParentCommandCode is missing because the BlockedData is more important! -->
        <BlockedDataCommand>
            <BlockCountCommandCode>05</BlockCountCommandCode>
            <BlockCommandCode>06</BlockCommandCode>
        </BlockedDataCommand>
        <Description>Gets the Module configuration data, as an XML fragment</Description>
        <Parameter>
            <Name>Configuration.ModuleID</Name>
            <InputDataType>
                <DataTypeName>DecimalInteger</DataTypeName>
            </InputDataType>
            <TrafficDataType>
                <DataTypeName>String</DataTypeName>
            </TrafficDataType>
            <Units>Dimensionless</Units>
            <Regex>[0-7]</Regex>
            <Tooltip>Allowed Values: ModuleID 0 to 7</Tooltip>
        </Parameter>
        <SendToPort>false</SendToPort>
        <Response>
            <Name>Configuration.Module</Name>
            <DataTypeName>XML</DataTypeName>
            <Units>Dimensionless</Units>
        </Response>
    </Command>
    <!-- setModuleConfiguration() iterates over setConfigurationBlock() --> <!-- to set all blocks in the specified ModuleID, --> <!-- using the configuration data in the specified filename --> <!-- These sub-commands are specified through the use of the <BlockedDataCommand> element --> <!-- This Command is executed entirely on the host -->
    <Command>
        <Identifier>setModuleConfiguration</Identifier>
        <CommandCode>04</CommandCode>
        <CommandVariant>0000</CommandVariant>
        <!-- Set the Module XML configuration data by iterating this 'macro' --> <!-- Core.setConfigurationBlock() -->
        <SteppedDataCommand>
            <SteppedCommandCodeBase>00</SteppedCommandCodeBase>
            <SteppedCommandCode>07</SteppedCommandCode>
        </SteppedDataCommand>
        <Description>Sets the Module configuration data, as an XML fragment</Description>
        <Parameter>
            <Name>Configuration.ModuleID</Name>
            <InputDataType>
                <DataTypeName>DecimalInteger</DataTypeName>
            </InputDataType>
            <TrafficDataType>
                <DataTypeName>String</DataTypeName>
            </TrafficDataType>
            <Units>Dimensionless</Units>
            <Regex>[0-7]</Regex>
            <Tooltip>Allowed Values: ModuleID 0 to 7</Tooltip>
        </Parameter>
        <Parameter>
            <Name>Configuration.Filename</Name>
            <InputDataType>
                <DataTypeName>String</DataTypeName>
            </InputDataType>
            <TrafficDataType>
                <DataTypeName>String</DataTypeName>
            </TrafficDataType>
            <Units>Dimensionless</Units>
            <!-- ToDo Regex -->
            <Tooltip>The pathname/filename containing the configuration XML</Tooltip>
        </Parameter>
        <Parameter>
            <Name>CompressedFormat</Name>
            <InputDataType>
                <DataTypeName>Boolean</DataTypeName>
            </InputDataType>
            <TrafficDataType>
                <DataTypeName>Boolean</DataTypeName>
            </TrafficDataType>
            <Units>Dimensionless</Units>
            <Choices>false, true</Choices>
            <Tooltip>Allowed values: true or false This removes all unnecessary characters from the XML</Tooltip>
        </Parameter>
        <SendToPort>false</SendToPort>
        <Ack>
            <Name>Ack</Name>
        </Ack>
    </Command>
    <!-- getConfigurationBlockCount() counts the number of blocks of data in the Module memory --> <!-- getConfigurationBlockCount() refers to its parent getModuleConfiguration() --> <!-- through the <ParentCommandCode> element -->
    <Command>
        <Identifier>getConfigurationBlockCount</Identifier>
        <CommandCode>05</CommandCode>
        <CommandVariant>0000</CommandVariant>
        <BlockedDataCommand>
            <ParentCommandCode>03</ParentCommandCode>
        </BlockedDataCommand>
        <Description>Gets the number of blocks of data in the Module configuration</Description>
        <Parameter>
            <Name>Configuration.ModuleID</Name>
            <InputDataType>
                <DataTypeName>DecimalInteger</DataTypeName>
            </InputDataType>
            <TrafficDataType>
                <DataTypeName>String</DataTypeName>
            </TrafficDataType>
            <Units>Dimensionless</Units>
            <Regex>[0-7]</Regex>
            <Tooltip>Allowed Values: ModuleID 0 to 7</Tooltip>
        </Parameter>
        <SendToPort>true</SendToPort>
        <Response>
            <Name>Configuration.BlockCount</Name>
            <DataTypeName>HexInteger</DataTypeName>
            <Units>Dimensionless</Units>
            <Regex>[0-9A-F][0-9A-F][0-9A-F][0-9A-F]</Regex>
        </Response>
    </Command>
    <!-- getConfigurationBlock() obtains the configuration data in the specified Module memory --> <!-- getConfigurationBlock() refers to its parent getModuleConfiguration() --> <!-- through the <ParentCommandCode> element -->
    <Command>
        <Identifier>getConfigurationBlock</Identifier>
        <CommandCode>06</CommandCode>
        <CommandVariant>0000</CommandVariant>
        <BlockedDataCommand>
            <ParentCommandCode>03</ParentCommandCode>
        </BlockedDataCommand>
        <Description>Gets the specified block of Module configuration data, as an XML fragment</Description>
        <Parameter>
            <Name>Configuration.ModuleID</Name>
            <InputDataType>
                <DataTypeName>DecimalInteger</DataTypeName>
            </InputDataType>
            <TrafficDataType>
                <DataTypeName>String</DataTypeName>
            </TrafficDataType>
            <Units>Dimensionless</Units>
            <Regex>[0-7]</Regex>
            <Tooltip>Allowed Values: ModuleID 0 to 7</Tooltip>
        </Parameter>
        <Parameter>
            <Name>Configuration.BlockID</Name>
            <InputDataType>
                <DataTypeName>HexInteger</DataTypeName>
            </InputDataType>
            <TrafficDataType>
                <DataTypeName>String</DataTypeName>
            </TrafficDataType>
            <Units>Dimensionless</Units>
            <Regex>(00[0-6][0-9A-F])|(00[7][0-9A-E])</Regex>
            <Tooltip>Allowed Values: BlockID 0000 to 007E</Tooltip>
        </Parameter>
        <SendToPort>true</SendToPort>
        <Response>
            <Name>Configuration.Block</Name>
            <DataTypeName>XML</DataTypeName>
            <Units>Dimensionless</Units>
            <Regex>^\p{Graph}{512}$</Regex>
        </Response>
    </Command>
    <!-- setConfigurationBlock() sets the configuration data in the specified Module memory --> <!-- setConfigurationBlock() refers to its parent setModuleConfiguration() --> <!-- through the <ParentCommandCode> element -->
    <Command>
        <Identifier>setConfigurationBlock</Identifier>
        <CommandCode>07</CommandCode>
        <CommandVariant>0000</CommandVariant>
        <SteppedDataCommand>
            <ParentCommandCodeBase>00</ParentCommandCodeBase>
            <ParentCommandCode>04</ParentCommandCode>
        </SteppedDataCommand>
        <Description>Sets the specified block of Module configuration data</Description>
        <Parameter>
            <Name>Configuration.ModuleID</Name>
            <InputDataType>
                <DataTypeName>DecimalInteger</DataTypeName>
            </InputDataType>
            <TrafficDataType>
                <DataTypeName>String</DataTypeName>
            </TrafficDataType>
            <Units>Dimensionless</Units>
            <Regex>[0-7]</Regex>
            <Tooltip>Allowed Values: ModuleID 0 to 7</Tooltip>
        </Parameter>
        <Parameter>
            <Name>Configuration.BlockID</Name>
            <InputDataType>
                <DataTypeName>HexInteger</DataTypeName>
            </InputDataType>
            <TrafficDataType>
                <DataTypeName>String</DataTypeName>
            </TrafficDataType>
            <Units>Dimensionless</Units>
            <Regex>(00[0-6][0-9A-F])|(00[7][0-9A-E])</Regex>
            <Tooltip>Allowed Values: BlockID 0000 to 007E</Tooltip>
        </Parameter>
        <Parameter>
            <Name>Configuration.Data</Name>
            <InputDataType>
                <DataTypeName>String</DataTypeName>
            </InputDataType>
            <TrafficDataType>
                <DataTypeName>String</DataTypeName>
            </TrafficDataType>
            <Units>Dimensionless</Units>
            <Regex>^\p{Graph}{512}$</Regex>
            <Tooltip>The data must contain exactly 512 ASCII characters</Tooltip>
        </Parameter>
        <SendToPort>true</SendToPort>
        <Ack>
            <Name>Ack</Name>
        </Ack>
    </Command>
    <!-- Core Commands executed entirely on the host --> <!-- start() starts the Instrument, exactly as for the ControlPanel green button --> <!-- This is required for the Macro support -->
    <Command>
        <Identifier>start</Identifier>
        <CommandCode>08</CommandCode>
        <CommandVariant>0000</CommandVariant>
        <Description>Starts the Instrument</Description>
        <SendToPort>false</SendToPort>
        <Response>
            <Name>Ack</Name>
            <DataTypeName>String</DataTypeName>
            <Units>Dimensionless</Units>
            <Regex>Ok</Regex>
        </Response>
    </Command>
    <!-- stop() stops the Instrument, exactly as for the ControlPanel red button --> <!-- This is required for the Macro support -->
    <Command>
        <Identifier>stop</Identifier>
        <CommandCode>09</CommandCode>
        <CommandVariant>0000</CommandVariant>
        <Description>Stops the Instrument</Description>
        <SendToPort>false</SendToPort>
        <Response>
            <Name>Ack</Name>
            <DataTypeName>String</DataTypeName>
            <Units>Dimensionless</Units>
            <Regex>Ok</Regex>
        </Response>
    </Command>
    <!-- getVersion() returns a String giving the version information for the Controller OS -->
    <Command>
        <Identifier>getVersion</Identifier>
        <CommandCode>0A</CommandCode>
        <CommandVariant>0000</CommandVariant>
        <Description>Gets the Version of the Controller OS</Description>
        <SendToPort>false</SendToPort>
        <Response>
            <Name>Version</Name>
            <DataTypeName>String</DataTypeName>
            <Units>Dimensionless</Units>
        </Response>
    </Command>
    <!-- Controller and Secondary Plugins -->     <!-- Analogue Plugin -->
    <Plugin> <!-- A virtual Plugin -->
        <Identifier>Analogue</Identifier>
        <Name>Analogue</Name>
        <Description>The Controller's Analogue facilities</Description>
        <ResourceKey>Analogue</ResourceKey>
        <!-- Example of Configuration Metadata specific to this Plugin --> <!--<Configuration> --> <!--<md:Key>Example.Data</md:Key> --> <!--<md:Value>Example</md:Value> --> <!--<md:DataTypeName>String</md:DataTypeName> --> <!--<md:Units>Dimensionless</md:Units> --> <!--<md:Description>A sample item of Analogue Plugin metadata</md:Description> --> <!--</Configuration> --> <!-- The Analogue Plugin has a CommandCodeBase of 02 -->
        <CommandCodeBase>02</CommandCodeBase>
        <Command>
            <Identifier>getA2D</Identifier>
            <CommandCode>00</CommandCode>
            <CommandVariant>0000</CommandVariant>
            <Description>Gets the voltage read by the selected A2D channel</Description>
            <Parameter>
                <Name>A2D.Channel</Name>
                <InputDataType>
                    <DataTypeName>DecimalByte</DataTypeName>
                </InputDataType>
                <TrafficDataType> <!-- Staribus Decimal bytes are always three digits 000...255 -->
                    <DataTypeName>DecimalByte</DataTypeName>
                </TrafficDataType>
                <Units>Dimensionless</Units>
                <Regex>^[0-3]$</Regex>
                <Tooltip>Allowed Values: Channels 0 to 3</Tooltip>
            </Parameter>
            <SendToPort>true</SendToPort>
            <Response>
                <Name>A2D.Value</Name>
                <DataTypeName>DecimalInteger</DataTypeName>
                <Units>mV</Units>
                <Regex>^0*([0-9]{1,3}|1[0-9]{3}|2[0-4][0-9]{2}|2500)$</Regex>
            </Response>
        </Command>
        <Command>
            <Identifier>getD2A</Identifier>
            <CommandCode>01</CommandCode>
            <CommandVariant>0000</CommandVariant>
            <Description>Gets the voltage output by the selected D2A channel</Description>
            <Parameter>
                <Name>D2A.Channel</Name>
                <InputDataType>
                    <DataTypeName>DecimalByte</DataTypeName>
                </InputDataType>
                <TrafficDataType> <!-- Staribus Decimal bytes are always three digits 000...255 -->
                    <DataTypeName>DecimalByte</DataTypeName>
                </TrafficDataType>
                <Units>Dimensionless</Units>
                <Regex>^[0|1]$</Regex>
                <Tooltip>Allowed Values: Channels 0 or 1</Tooltip>
            </Parameter>
            <SendToPort>true</SendToPort>
            <Response>
                <Name>D2A.Value</Name>
                <DataTypeName>DecimalInteger</DataTypeName>
                <Units>mV</Units>
                <Regex>^0*([0-9]{1,3}|1[0-9]{3}|2[0-4][0-9]{2}|2500)$</Regex>
            </Response>
        </Command>
        <Command>
            <Identifier>setD2A</Identifier>
            <CommandCode>02</CommandCode>
            <CommandVariant>0000</CommandVariant>
            <Description>Sets the voltage to be output by the selected D2A channel</Description>
            <Parameter>
                <Name>D2A.Channel</Name>
                <InputDataType>
                    <DataTypeName>DecimalByte</DataTypeName>
                </InputDataType>
                <TrafficDataType> <!-- Staribus Decimal bytes are always three digits 000...255 -->
                    <DataTypeName>DecimalByte</DataTypeName>
                </TrafficDataType>
                <Units>Dimensionless</Units>
                <Regex>^[0|1]$</Regex>
                <Tooltip>Allowed Values: Channels 0 or 1</Tooltip>
            </Parameter>
            <Parameter>
                <Name>D2A.Value</Name>
                <InputDataType>
                    <DataTypeName>DecimalInteger</DataTypeName>
                </InputDataType>
                <TrafficDataType> <!-- Staribus Decimal integers are always four digits 0000...9999 -->
                    <DataTypeName>DecimalInteger</DataTypeName>
                </TrafficDataType>
                <Units>mV</Units>
                <Regex>^0*([0-9]{1,3}|1[0-9]{3}|2[0-4][0-9]{2}|2500)$</Regex>
                <Tooltip>Allowed Values: 0000 to 2500 milliVolts</Tooltip>
            </Parameter>
            <SendToPort>true</SendToPort>
            <Ack>
                <Name>Ack</Name>
            </Ack>
        </Command>
    </Plugin>
    <!-- Utilities Plugin -->
    <Plugin> <!-- A virtual Plugin -->
        <Identifier>Utilities</Identifier>
        <Name>Controller</Name>
        <Description>The Utilities Module</Description>
        <ResourceKey>Utilities</ResourceKey>
        <!-- Example of Configuration Metadata specific to this Plugin --> <!--<Configuration> --> <!--<md:Key>Example.Data</md:Key> --> <!--<md:Value>Example</md:Value> --> <!--<md:DataTypeName>String</md:DataTypeName> --> <!--<md:Units>Dimensionless</md:Units> --> <!--<md:Description>A sample item of Utilities Plugin metadata</md:Description> --> <!--</Configuration> --> <!-- The Utilities Plugin is always CommandCodeBase 01 -->
        <CommandCodeBase>01</CommandCodeBase>
        <Command>
            <Identifier>getClockDate</Identifier>
            <CommandCode>00</CommandCode>
            <CommandVariant>0000</CommandVariant>
            <Description>Gets the Date from the Controller clock</Description>
            <SendToPort>true</SendToPort>
            <Response>
                <Name>Clock.Date</Name>
                <DataTypeName>Date</DataTypeName>
                <Units>Dimensionless</Units>
                <Regex>^(19|20)\d\d([-])(0[1-9]|1[012])\2(0[1-9]|[12][0-9]|3[01])$</Regex>
            </Response>
        </Command>
        <Command>
            <Identifier>setClockDate</Identifier>
            <CommandCode>01</CommandCode>
            <CommandVariant>0000</CommandVariant>
            <Description>Sets the Date on the Controller clock</Description>
            <Parameter>
                <Name>Clock.Date</Name>
                <InputDataType>
                    <DataTypeName>Date</DataTypeName>
                </InputDataType>
                <TrafficDataType>
                    <DataTypeName>String</DataTypeName>
                </TrafficDataType>
                <Units>Dimensionless</Units>
                <Regex>^(19|20)\d\d([-])(0[1-9]|1[012])\2(0[1-9]|[12][0-9]|3[01])$</Regex>
                <Tooltip>Format YYYY-MM-DD</Tooltip>
            </Parameter>
            <SendToPort>true</SendToPort>
            <Ack>
                <Name>Ack</Name>
            </Ack>
        </Command>
        <Command>
            <Identifier>getClockTime</Identifier>
            <CommandCode>02</CommandCode>
            <CommandVariant>0000</CommandVariant>
            <Description>Gets the Time from the Controller clock</Description>
            <SendToPort>true</SendToPort>
            <Response>
                <Name>Clock.Time</Name>
                <DataTypeName>Time</DataTypeName>
                <Units>Dimensionless</Units>
                <Regex>^(([0-1][0-9])|([2][0-3])):([0-5][0-9]):([0-5][0-9])$</Regex>
            </Response>
        </Command>
        <Command>
            <Identifier>setClockTime</Identifier>
            <CommandCode>03</CommandCode>
            <CommandVariant>0000</CommandVariant>
            <Description>Sets the Time on the Controller clock</Description>
            <Parameter>
                <Name>Clock.Time</Name>
                <InputDataType>
                    <DataTypeName>Time</DataTypeName>
                </InputDataType>
                <TrafficDataType>
                    <DataTypeName>String</DataTypeName>
                </TrafficDataType>
                <Units>Dimensionless</Units>
                <Regex>^(([0-1][0-9]|[2][0-3])):([0-5][0-9]):([0-5][0-9])$</Regex>
                <Tooltip>Format HH:MM:SS</Tooltip>
            </Parameter>
            <SendToPort>true</SendToPort>
            <Ack>
                <Name>Ack</Name>
            </Ack>
        </Command>
        <Command>
            <Identifier>getTemperature</Identifier>
            <CommandCode>04</CommandCode>
            <CommandVariant>0000</CommandVariant>
            <Description>Gets the Temperature of the Controller</Description>
            <SendToPort>true</SendToPort>
            <Response>
                <Name>Controller.Temperature</Name>
                <DataTypeName>DecimalFloat</DataTypeName>
                <Units>Celsius</Units>
                <!-- (- or +), once or not at all --> <!-- zero or more digits [0...9] --> <!-- decimal point followed by one or more digits, once or not at all -->
                <Regex>^(-|\+)?\d*(\.\d+)?$</Regex>
            </Response>
        </Command>
        <!-- Low-level developer functions! -->
        <Command>
            <Identifier>getMemoryPage</Identifier>
            <CommandCode>05</CommandCode>
            <CommandVariant>0000</CommandVariant>
            <Description>Gets the specified page from the EEPROM memory</Description>
            <Parameter>
                <Name>ModuleAddress</Name>
                <InputDataType>
                    <DataTypeName>DecimalInteger</DataTypeName>
                </InputDataType>
                <TrafficDataType>
                    <DataTypeName>HexByte</DataTypeName>
                </TrafficDataType>
                <Units>Dimensionless</Units>
                <Regex>[0-7]</Regex>
                <Tooltip>Allowed Values: 0 to 7 (0 is the Controller, 1 the Primary Plugin)</Tooltip>
            </Parameter>
            <Parameter>
                <Name>PageNumber</Name>
                <InputDataType>
                    <DataTypeName>HexByte</DataTypeName>
                </InputDataType>
                <TrafficDataType>
                    <DataTypeName>HexByte</DataTypeName>
                </TrafficDataType>
                <Units>Dimensionless</Units>
                <Regex>^[0-9A-F][0-9A-F]$</Regex>
                <Tooltip>Allowed Values: 00 to FF Hex</Tooltip>
            </Parameter>
            <SendToPort>true</SendToPort>
            <Response>
                <Name>MemoryPage</Name>
                <DataTypeName>String</DataTypeName>
                <Units>Dimensionless</Units>
                <Regex>^\p{ASCII}{256}$</Regex>
            </Response>
        </Command>
        <Command>
            <Identifier>setMemoryPage</Identifier>
            <CommandCode>06</CommandCode>
            <CommandVariant>0000</CommandVariant>
            <Description>Sets the data into the specified page in the EEPROM memory</Description>
            <Parameter>
                <Name>ModuleAddress</Name>
                <InputDataType>
                    <DataTypeName>DecimalInteger</DataTypeName>
                </InputDataType>
                <TrafficDataType>
                    <DataTypeName>HexByte</DataTypeName>
                </TrafficDataType>
                <Units>Dimensionless</Units>
                <Regex>[0-7]</Regex>
                <Tooltip>Allowed Values: 0 to 7 (0 is the Controller, 1 the Primary Plugin)</Tooltip>
            </Parameter>
            <Parameter>
                <Name>PageNumber</Name>
                <InputDataType>
                    <DataTypeName>HexByte</DataTypeName>
                </InputDataType>
                <TrafficDataType>
                    <DataTypeName>HexByte</DataTypeName>
                </TrafficDataType>
                <Units>Dimensionless</Units>
                <Regex>^[0-9A-F][0-9A-F]$</Regex>
                <Tooltip>Allowed Values: 00 to FF Hex</Tooltip>
            </Parameter>
            <Parameter>
                <Name>Data</Name>
                <InputDataType>
                    <DataTypeName>String</DataTypeName>
                </InputDataType>
                <TrafficDataType>
                    <DataTypeName>String</DataTypeName>
                </TrafficDataType>
                <Units>Dimensionless</Units>
                <Regex>^\p{Graph}{256}$</Regex>
                <Tooltip>The data must contain exactly 256 ASCII characters</Tooltip>
            </Parameter>
            <SendToPort>true</SendToPort>
            <Ack>
                <Name>Ack</Name>
            </Ack>
        </Command>
        <Command>
            <Identifier>copyResponseToClipboard</Identifier>
            <CommandCode>07</CommandCode>
            <CommandVariant>0000</CommandVariant>
            <Description>Copies the most recent ResponseValue to the host Clipboard</Description>
            <SendToPort>false</SendToPort>
            <Ack>
                <Name>Ack</Name>
            </Ack>
        </Command>
        <Command>
            <Identifier>enableBacklight</Identifier>
            <CommandCode>08</CommandCode>
            <CommandVariant>0000</CommandVariant>
            <Description>Controls the LCD Display backlight</Description>
            <Parameter>
                <Name>EnableBacklight</Name>
                <InputDataType>
                    <DataTypeName>Boolean</DataTypeName>
                </InputDataType>
                <TrafficDataType>
                    <DataTypeName>Boolean</DataTypeName>
                </TrafficDataType>
                <Units>Dimensionless</Units>
                <Choices>false, true</Choices>
                <Tooltip>Controls the LCD Display backlight. Allowed values: true or false</Tooltip>
            </Parameter>
            <SendToPort>true</SendToPort>
            <Ack>
                <Name>Ack</Name>
            </Ack>
        </Command>
    </Plugin>