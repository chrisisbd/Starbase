# Copyright 2000, 2001, 2002, 2003, 04, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2013
# Laurence Newell
# starbase@ukraa.com
# radio.telescope@btinternet.com
#
# This file is part of Starbase.
#
# Starbase is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Starbase is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Starbase.  If not, see http://www.gnu.org/licenses.

# The file lists the commands available in the class StaribusCoreDAO

publishChartRealtime=Captures all A2D channels and publishes the latest Chart to a server. You must specify the hostname of the FTP server, and the username and password of an account to which you have access.
publishChartRealtimeDay=Captures all A2D channels and publishes the latest Chart to a server, for a period of one Day, starting at the Capture.Trigger Time. All data from the previous period are lost! You must specify the hostname of the FTP server, and the username and password of an account to which you have access.
captureRawDataRealtime=This command reads Raw Data directly from the controller's analogue to digital converters (ADC), and can optionally update the chart with the RealtimeUpdate control.

getData=This command downloads the data currently held in the controller's logging memory. It can be used while the controller is still capturing, and so will return only the data currently captured.
getTestData=This command returns data with which to test the Logger software.

# Staribus
getStaribusAddress=This command returns the StaribusAddress of a Staribus controller. It reads the address field directly from the instrument XML, and is provided as a convenient way to obtain the address for use elsewhere.
setStaribusAddress=**Under Development** This command sets the StaribusAddress of a Staribus controller. It writes the address into the instrument XML. WARNING! <b>In order for the instrument to be recognised at the new address, the hardware must be reset and if necessary, rediscovered by the ObservatoryExplorer</b>.

# Maintenance
writeConfigurationXML=A <b>System Builder</b> command which writes the specified Controller or Module XML configuration file, at the specified location, in a form suitable for loading into an EEPROM device. Markers such as [controller_core] and [plugin_manifest] are placed to show how the Controller and Plugin XML should be reassembled to give the XML for the composite Instrument. The compression option removes all comments and whitespace, to save space in the EEPROM device.
getStatus=This command returns a detailed status message, usually providing more information about a returned error code (e.g. INVALID_PARAMETER, or PREMATURE_TERMINATION). The format is usually "[noun=xxx] [verb=yyy]". This message can also be used to return the reason for a controller raising a Look At Me (LAM) flag. Sometimes the developers use this message to carry debugging information (usually in a beta release).

# These are all SendToPort, and so implementations don't appear in the DAO
getRealtimeData=Return the current value of the data taken from the controller analogue to digital converters (ADC). These data are indicated on the instrument's control panel in the rack, and are available via the instrument metadata.

getA2D=Get the current value of the output from the specified channel of the analogue to digital converter (ADC) on the controller.
getD2A=Get the current value of the output from the specified channel of the digital to analogue converter (DAC) on the controller.
setD2A=Set the value of the output from the specified channel of the digital to analogue converter (DAC) on the controller.

getClockDate=Get the Date from the Controller Clock, in the format yyyy-mm-dd (ISO 8601).
setClockDate=Set the Date on the Controller Clock, in the format yyyy-mm-dd (ISO 8601).
getClockTime=Get the Time from the Controller Clock, in the format hh:mm:ss (ISO 8601).
setClockTime=Set the Time on the Controller Clock, in the format hh:mm:ss (ISO 8601).

getTemperature=Get the temperature of the Controller module. Note that controller plugins may have their own getTemperature() commands.
getMemoryPage=Read the contents of the specified page in the controller's memory (not the logging memory). See the Staribus Manual for an explanation of how the memory pages relate to the configuration block numbers.
setMemoryPage=Write the contents of the specified page in the controller's memory (not the logging memory). See the Staribus Manual for an explanation of how the memory pages relate to the configuration block numbers.
enableBacklight=Control the backlight of the LCD display, if fitted to the controller's I2C bus.

# These could also be for the HostMemory Logging facility, so do appear in the DAO
getSpace=This command reads the amount of space left in the controller's logging memory, as a percentage 0 to 100%. Use this during capture to check how much logging time remains. Note that if the memory is large, then this figure will be a very coarse indication of the remaining space available.
getDataBlockCount=This command returns the number of <b>complete</b> Staribus data blocks currently held in the controller's logging memory. This block count is used internally during the download of the whole dataset.
getDataBlock=This command downloads a specified data block from the controller's logging memory. This is used internally during the download of the whole dataset. Valid BlockIds are from 0000 to (BlockCount-1). The block format is: "2008-08-23 12:00:00 +023 0001   000000100020003000400050006...." i.e. Date, Time, Temperature, SampleRate, and data samples, repeated for all channels for as many times as will fit in the block of 512 bytes.
getRate=This command reads the value of the sample rate currently set in the controller, in samples per second.
setRate=This command sets the value of the sample rate to be used by the controller, in samples per second. Bear in mind the time constant of the output you are logging, there is little point in sampling significantly faster than the time constant.
capture=Start or stop the offline capture mode. Capture status is indicated by CAPTURE_ACTIVE in the Status field of the CommandLog. Once capture is started, some commands will not be available.
